// scrap2.js (no proxy version)
const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const { parse } = require('json2csv');
const dayjs = require('dayjs');

const TARGET_URL = "https://nationalthaiwater.onwr.go.th/waterlevel";
const OUTPUT_FILE = "waterlevel_report.csv";

(async () => {
  let success = false;

  console.log(`üåê ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ proxy`);
  try {
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();

    await page.goto(TARGET_URL, { waitUntil: 'networkidle2', timeout: 60000 });
    console.log(`üìÑ Title: ${await page.title()}`);
    console.log(`üåê URL: ${page.url()}`);

    // ‡∏•‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    try {
      await page.click("button:contains('‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö')");
      console.log("‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß");
    } catch (e) {
      console.log("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
    }

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î
    try {
      console.log("‚è≥ ‡∏£‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...");
      await page.waitForSelector(".MuiTable-root tbody tr", { timeout: 60000 });
    } catch (e) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô debug_page.html ‡πÅ‡∏•‡∏∞ screenshot");
      fs.writeFileSync("debug_page.html", await page.content());
      await page.screenshot({ path: "debug_screenshot.png", fullPage: true });
      await browser.close();
      return;
    }

    const rows = await page.$$(".MuiTable-root tbody tr");
    const allData = [];
    for (let row of rows) {
      const cols = await row.$$eval("td", tds => tds.map(td => td.innerText.trim()));
      if (cols.length >= 5) {
        if (cols.length === 9) cols[8] = dayjs().format('DD/MM/YYYY');
        else cols.push(dayjs().format('DD/MM/YYYY'));
        allData.push(cols);
      }
    }

    await browser.close();

    if (allData.length) {
      const columnNames = [
        "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ", "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥",
        "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á", "‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏™‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö", "%‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏ô‡πâ‡∏≥",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
      ];
      const csv = parse(allData.map(row => Object.fromEntries(row.map((val, idx) => [columnNames[idx] || `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°_${idx}`, val]))));

      fs.writeFileSync(OUTPUT_FILE, csv, { encoding: 'utf-8' });
      console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà ${OUTPUT_FILE}`);
    } else {
      console.log("‚ö†Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á");
      fs.writeFileSync(OUTPUT_FILE, "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°,‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n", { encoding: 'utf-8' });
    }

  } catch (err) {
    console.log(`‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
    if (!fs.existsSync(OUTPUT_FILE)) {
      fs.writeFileSync(OUTPUT_FILE, "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°,‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n", { encoding: 'utf-8' });
    }
  }
})();
