# -*- coding: utf-8 -*-
import os, time, sys
import pandas as pd
from pathlib import Path
from datetime import datetime

# ============================== PATH SETUP ==============================
def _pick_existing(*candidates: Path) -> Path | None:
    for p in candidates:
        if p and Path(p).expanduser().resolve().exists():
            return Path(p).expanduser().resolve()
    return None

# ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ê‡∏≤‡∏ô:
# - ‡∏ö‡∏ô GitHub Actions ‡∏à‡∏∞‡∏°‡∏µ GITHUB_WORKSPACE
# - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
BASE_DIR = Path(os.getenv("GITHUB_WORKSPACE", Path(__file__).parent)).resolve()

# ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Environment (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå)
ENV_LARGE  = os.getenv("LARGE_CSV",  str(BASE_DIR / "waterdam_report_large.csv"))
ENV_MEDIUM = os.getenv("MEDIUM_CSV", str(BASE_DIR / "waterdam_report_medium.csv"))
ENV_OUT    = os.getenv("OUT_CSV",    str(BASE_DIR / "waterdam_report.csv"))

# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö path ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Windows (‡∏ñ‡πâ‡∏≤‡πÄ‡∏ú‡∏•‡∏≠‡πÉ‡∏™‡πà‡∏°‡∏≤)
WIN_LARGE  = r"C:\Project_End\CodeProject\waterdam_report_large.csv"
WIN_MEDIUM = r"C:\Project_End\CodeProject\waterdam_report_medium.csv"
WIN_OUT    = r"C:\Project_End\CodeProject\waterdam_report.csv"

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á" ‡πÇ‡∏î‡∏¢‡πÑ‡∏•‡πà‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ENV -> ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå -> Windows path ‡πÄ‡∏î‡∏¥‡∏°
LARGE_CSV  = _pick_existing(ENV_LARGE,  BASE_DIR / "waterdam_report_large.csv",  WIN_LARGE)
MEDIUM_CSV = _pick_existing(ENV_MEDIUM, BASE_DIR / "waterdam_report_medium.csv", WIN_MEDIUM)

# OUT_CSV ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠ (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ) ‚Äî ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô path Windows ‡∏ö‡∏ô Linux ‡∏à‡∏∞‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ï‡πâ BASE_DIR
_out_candidate = Path(ENV_OUT)
if _out_candidate.drive:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô path ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ drive (C:\...)
    OUT_CSV = BASE_DIR / Path(_out_candidate.name)   # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô BASE_DIR
else:
    OUT_CSV = (BASE_DIR / _out_candidate).resolve()

# ============================== GUARD ==============================
def _fail_missing():
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå", file=sys.stderr)
    print(f"- ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: waterdam_report_large.csv, waterdam_report_medium.csv", file=sys.stderr)
    print(f"- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {BASE_DIR}", file=sys.stderr)
    print("\n‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:", file=sys.stderr)
    print("1) ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ", file=sys.stderr)
    print("2) ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î ENV ‡πÉ‡∏ô workflow / ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:", file=sys.stderr)
    print('   LARGE_CSV=path/to/waterdam_report_large.csv', file=sys.stderr)
    print('   MEDIUM_CSV=path/to/waterdam_report_medium.csv', file=sys.stderr)
    sys.exit(1)

if LARGE_CSV is None or MEDIUM_CSV is None:
    _fail_missing()

# ======================== Core (‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå + Clean) ========================
def read_csv_smart(path: Path) -> pd.DataFrame:
    """
    ‡∏≠‡πà‡∏≤‡∏ô CSV ‡πÅ‡∏ö‡∏ö‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô:
    - ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ encoding (utf-8-sig, utf-8, cp874, latin-1)
    - ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ type
    - on_bad_lines='warn' ‡∏Å‡∏±‡∏ô crash ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏™‡∏µ‡∏¢‡∏£‡∏π‡∏õ
    """
    encodings = ("utf-8-sig", "utf-8", "cp874", "latin-1")
    last_err = None
    for enc in encodings:
        try:
            return pd.read_csv(
                path,
                encoding=enc,
                dtype=str,
                low_memory=False,
                on_bad_lines="warn",
            )
        except UnicodeDecodeError as e:
            last_err = e
            continue
    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏•‡∏≠‡∏á auto ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    try:
        return pd.read_csv(path, dtype=str, low_memory=False, on_bad_lines="warn")
    except Exception as e:
        raise RuntimeError(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {path} (last_err={last_err}, err={e})")

def run_merge_only():
    print(f"üì• ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà  : {LARGE_CSV}")
    print(f"üì• ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏•‡∏≤‡∏á : {MEDIUM_CSV}")

    df_large  = read_csv_smart(LARGE_CSV)
    df_medium = read_csv_smart(MEDIUM_CSV)

    # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡∏£‡∏ß‡∏°‡πÅ‡∏ö‡∏ö union ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏±‡∏î order ‡∏ï‡∏≤‡∏° df_large)
    ordered_cols = list(df_large.columns)
    for c in ordered_cols:
        if c not in df_medium.columns:
            df_medium[c] = pd.NA
    # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏Å‡∏¥‡∏ô‡πÉ‡∏ô df_medium ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á order
    df_medium = df_medium[ordered_cols]

    # ‡∏ï‡∏¥‡∏î tag ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô
    df_large["DamType"]  = "large"
    df_medium["DamType"] = "medium"

    # ‡∏£‡∏ß‡∏°
    df = pd.concat([df_large, df_medium], ignore_index=True)

    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏ó‡∏≥‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏ö‡∏ö string)
    df = df.fillna("0")
    # ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏µ‡∏î/‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô "0"
    df = df.replace({"-": "0", "--": "0", "‚Äì": "0", "‚Äî": "0", "": "0"})
    # ‡∏ï‡∏±‡∏î space ‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤
    df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

    # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ã‡πâ‡∏≥
    before = len(df)
    df = df.drop_duplicates()
    deduped = before - len(df)
    if deduped > 0:
        print(f"üßπ ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ã‡πâ‡∏≥ {deduped:,} ‡πÅ‡∏ñ‡∏ß")

    OUT_CSV.parent.mkdir(parents=True, exist_ok=True)
    df.to_csv(OUT_CSV, index=False, encoding="utf-8-sig")
    print(f"üíæ ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß: {OUT_CSV} ({len(df):,} ‡πÅ‡∏ñ‡∏ß)")
    return len(df), str(OUT_CSV)

# ================================== MAIN ==================================
def main():
    t0 = time.time()
    rows, out_path = run_merge_only()
    elapsed = time.time() - t0
    when = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    print(
        f"[WaterDam MERGE] OK rows={rows} @ {when}\n"
        f"‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\n"
        f"- ‡πÅ‡∏ñ‡∏ß: {rows}\n"
        f"- ‡πÑ‡∏ü‡∏•‡πå: {out_path}\n"
        f"- ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {elapsed:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n"
    )

if __name__ == "__main__":
    main()
