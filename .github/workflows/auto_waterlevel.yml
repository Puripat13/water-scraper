name: Auto Scrape WaterLevel

on:
  schedule:
    # รันทุกวัน 20:00 ไทย (UTC+7) = 13:00 UTC
    - cron: '0 13 * * *'
  workflow_dispatch:

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTHONUNBUFFERED: "1"
      CSV_OUT: waterlevel_report.csv

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Show Chrome version
        run: google-chrome --version || true

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install selenium pandas google-api-python-client google-auth google-auth-httplib2

      - name: Run scraper
        run: |
          set -eux
          python scrap2.py
          test -f "${CSV_OUT}"

      - name: Upload artifact (CSV)
        if: always() && hashFiles(env.CSV_OUT) != ''
        uses: actions/upload-artifact@v4
        with:
          name: waterlevel_report
          path: ${{ env.CSV_OUT }}
          if-no-files-found: ignore
          retention-days: 7

      - name: Append & Upload to Google Drive (merge + dedup + fixed schema)
        if: success() && hashFiles('waterlevel_report.csv') != ''
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT }}   # JSON ของ Service Account (ทั้งก้อน)
          WATERLEVEL_FILE_ID: ${{ secrets.WATERLEVEL_FILE_ID }}  # fileId ของไฟล์เดิม
          CSV_OUT: waterlevel_report.csv
        run: |
          python - <<'PY'
          import os, io, json, sys
          import pandas as pd
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
          from googleapiclient.errors import HttpError

          SA = json.loads(os.environ["SERVICE_ACCOUNT_JSON"])
          FILE_ID = (os.environ.get("WATERLEVEL_FILE_ID") or "").strip() or None
          CSV = os.environ.get("CSV_OUT", "waterlevel_report.csv")

          # ---- สคีมา 9 คอลัมน์ (อังกฤษ) ----
          CANON = ["Station","Location","Time","Water_Level","Bank_Level","Gauge_Zero","Capacity_Percent","Status","Data_Time"]
          TH2EN = {
            "ชื่อสถานี":"Station","ที่ตั้ง":"Location","เวลา":"Time","ระดับน้ำ":"Water_Level",
            "ระดับตลิ่ง":"Bank_Level","ค่าศูนย์เสาระดับ":"Gauge_Zero","%ความจุน้ำ":"Capacity_Percent",
            "สถานการณ์":"Status","วันที่เก็บข้อมูล":"Data_Time"
          }
          def normalize(df: pd.DataFrame) -> pd.DataFrame:
              df = df.rename(columns=TH2EN)
              df = df[[c for c in df.columns if c in CANON]]
              for c in CANON:
                  if c not in df.columns: df[c] = ""
              return df[CANON]

          # อ่านไฟล์ใหม่จากโลคัล
          new_df = normalize(pd.read_csv(CSV))

          creds = Credentials.from_service_account_info(SA, scopes=["https://www.googleapis.com/auth/drive"])
          drive = build("drive", "v3", credentials=creds, cache_discovery=False)

          def meta(fid):
              return drive.files().get(fileId=fid, fields="id,name,mimeType,driveId,size,parents", supportsAllDrives=True).execute()

          def download_csv(fid):
              m = meta(fid)
              mt = m["mimeType"]
              if mt.startswith("application/vnd.google-apps"):
                  # เป็น Google Sheet -> export เป็น CSV เพื่อเอาไป merge
                  req = drive.files().export(fileId=fid, mimeType="text/csv")
              else:
                  req = drive.files().get_media(fileId=fid)
              buf = io.BytesIO()
              dl = MediaIoBaseDownload(buf, req)
              done = False
              while not done:
                  _, done = dl.next_chunk()
              buf.seek(0)
              try: df = pd.read_csv(buf)
              except Exception:
                  buf.seek(0); df = pd.read_csv(buf, encoding="utf-8-sig")
              return normalize(df)

          def upload_update(fid, df):
              tmp = "__merged_upload.csv"
              df.to_csv(tmp, index=False, encoding="utf-8-sig")
              media = MediaFileUpload(tmp, mimetype="text/csv", resumable=True)
              drive.files().update(fileId=fid, media_body=media, supportsAllDrives=True).execute()
              print(f"✅ Updated (append) fileId={fid}, rows={len(df)}")

          # ถ้ามี FILE_ID -> ดาวน์โหลดเดิม, รวม, ลบซ้ำ, อัปเดตทับ
          if FILE_ID:
              old_df = download_csv(FILE_ID)
              merged = pd.concat([old_df, new_df], ignore_index=True)
              # ลบซ้ำตาม Station + Data_Time (+Time เผื่อวันเดียวหลายเวลา)
              keys = [k for k in ["Station","Data_Time","Time"] if k in merged.columns]
              merged.drop_duplicates(subset=keys, keep="last", inplace=True)
              upload_update(FILE_ID, merged)
              sys.exit(0)

          print("❌ ต้องใส่ WATERLEVEL_FILE_ID (fileId ของไฟล์เดิม) ใน Secrets", file=sys.stderr)
          sys.exit(1)
          PY
