name: Auto Scrape WaterLevel

on:
  schedule:
    # รันทุกวันเวลา 20:00 ประเทศไทย (13:00 UTC)
    - cron: '0 13 * * *'
  workflow_dispatch:

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      TZ: Asia/Bangkok
      CSV_OUT: waterlevel_report.csv

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install selenium pandas google-api-python-client google-auth google-auth-httplib2

      - name: Run scraper
        run: |
          set -ex
          python scrap2.py

      - name: Append & Upload CSV to Google Drive (Shared Drive)
        env:
          DRIVE_FOLDER_ID: ${{ secrets.PURIPAT_ID }}
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT }}   # JSON ตรงๆ
          CSV_OUT: ${{ env.CSV_OUT }}
        run: |
          python - <<'PY'
          import os, io, json, sys
          import pandas as pd
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload

          CSV_OUT = os.getenv("CSV_OUT", "waterlevel_report.csv")
          FOLDER_ID = os.environ["DRIVE_FOLDER_ID"]
          SA_JSON = os.environ["SERVICE_ACCOUNT_JSON"]

          if not os.path.exists(CSV_OUT):
              print(f"❌ Not found local CSV: {CSV_OUT}", file=sys.stderr); sys.exit(1)

          # auth service account
          info = json.loads(SA_JSON)
          creds = Credentials.from_service_account_info(info, scopes=["https://www.googleapis.com/auth/drive"])
          drive = build("drive", "v3", credentials=creds, cache_discovery=False)

          # check folder accessible
          drive.files().get(fileId=FOLDER_ID, fields="id,name,driveId", supportsAllDrives=True).execute()

          # search existing file
          fname = os.path.basename(CSV_OUT).replace("'", "\\'")
          q = f"name = '{fname}' and '{FOLDER_ID}' in parents and trashed = false"
          res = drive.files().list(
              q=q, fields="files(id,name,mimeType)",
              supportsAllDrives=True, includeItemsFromAllDrives=True
          ).execute()
          files = res.get("files", [])

          new_df = pd.read_csv(CSV_OUT)

          if files:
              fid = files[0]["id"]
              mime = files[0]["mimeType"]

              if mime.startswith("application/vnd.google-apps"):
                  print("❌ Existing file is Google Sheets, please use Sheets API", file=sys.stderr)
                  sys.exit(2)

              # download old csv
              request = drive.files().get_media(fileId=fid)
              fh = io.BytesIO()
              downloader = MediaIoBaseDownload(fh, request)
              done = False
              while not done:
                  status, done = downloader.next_chunk()
              fh.seek(0)
              try:
                  old_df = pd.read_csv(fh)
              except Exception:
                  fh.seek(0)
                  old_df = pd.read_csv(fh, encoding="utf-8-sig")

              # merge + dedup (ตามชื่อสถานี + วันที่เก็บข้อมูล)
              all_df = pd.concat([old_df, new_df], ignore_index=True)
              if set(["ชื่อสถานี","วันที่เก็บข้อมูล"]).issubset(all_df.columns):
                  all_df.drop_duplicates(subset=["ชื่อสถานี","วันที่เก็บข้อมูล"], keep="last", inplace=True)
              else:
                  all_df.drop_duplicates(keep="last", inplace=True)

              tmp_path = "__merged_out.csv"
              all_df.to_csv(tmp_path, index=False, encoding="utf-8-sig")

              # update back
              media = MediaFileUpload(tmp_path, mimetype="text/csv", resumable=True)
              drive.files().update(fileId=fid, media_body=media, supportsAllDrives=True).execute()
              print(f"✅ Appended & updated: {fname} (fileId={fid})")

          else:
              meta = {"name": os.path.basename(CSV_OUT), "parents": [FOLDER_ID]}
              media = MediaFileUpload(CSV_OUT, mimetype="text/csv", resumable=True)
              created = drive.files().create(
                  body=meta, media_body=media, fields="id", supportsAllDrives=True
              ).execute()
              print(f"✅ Created new: {CSV_OUT} (fileId={created['id']})")
          PY
