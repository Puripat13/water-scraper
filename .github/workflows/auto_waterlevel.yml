name: Auto Scrape WaterLevel

on:
  schedule:
    # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 20:00 ‡∏ô.‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (UTC+7) = 13:00 UTC
    - cron: '0 13 * * *'
  workflow_dispatch:

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTHONUNBUFFERED: "1"
      CSV_OUT: waterlevel_report.csv

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # ‡πÉ‡∏ä‡πâ Chrome ‡∏û‡∏£‡πâ‡∏≠‡∏° Selenium Manager (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á chromedriver ‡πÄ‡∏≠‡∏á)
      - name: Setup Google Chrome
        uses: browser-actions/setup-chrome@v1
      - name: Show Chrome version
        run: google-chrome --version || true

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install selenium pandas google-api-python-client google-auth google-auth-httplib2

      # scrap2.py ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV_OUT (‡πÄ‡∏ä‡πà‡∏ô waterlevel_report.csv)
      - name: Run scraper
        run: |
          set -eux
          python scrap2.py
          test -f "${CSV_OUT}"

      - name: Upload artifact (CSV)
        if: always() && hashFiles(env.CSV_OUT) != ''
        uses: actions/upload-artifact@v4
        with:
          name: waterlevel_report
          path: ${{ env.CSV_OUT }}
          if-no-files-found: ignore
          retention-days: 7

      # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:
      # - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ DRIVE_FILE_ID  -> ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö My Drive)
      # - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÅ‡∏ï‡πà‡∏°‡∏µ PURIPAT_ID ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Shared Drive -> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô
      - name: Upload to Google Drive (update-or-create; My Drive or Shared Drive)
        if: success() && hashFiles(env.CSV_OUT) != ''
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT }}   # JSON ‡∏Ç‡∏≠‡∏á Service Account (‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô)
          DRIVE_FILE_ID: ${{ secrets.DRIVE_FILE_ID }}            # (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1) fileId ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô My Drive
          DRIVE_FOLDER_ID: ${{ secrets.PURIPAT_ID }}             # (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2) ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Shared Drive
          CSV_OUT: ${{ env.CSV_OUT }}
        run: |
          python - <<'PY'
          import os, json, io, sys
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
          from googleapiclient.errors import HttpError

          SA = json.loads(os.environ["SERVICE_ACCOUNT_JSON"])
          FILE_ID = (os.environ.get("DRIVE_FILE_ID") or "").strip() or None
          FOLDER_ID = (os.environ.get("DRIVE_FOLDER_ID") or "").strip() or None
          CSV = os.environ["CSV_OUT"]

          creds = Credentials.from_service_account_info(SA, scopes=["https://www.googleapis.com/auth/drive"])
          drive = build("drive", "v3", credentials=creds, cache_discovery=False)

          def get_meta(fid):
              return drive.files().get(fileId=fid, fields="id,name,size,mimeType,driveId,parents", supportsAllDrives=True).execute()

          def overwrite(fid, path):
              media = MediaFileUpload(path, mimetype="text/csv", resumable=True)
              drive.files().update(fileId=fid, media_body=media, supportsAllDrives=True).execute()
              m = get_meta(fid)
              print(f"‚úÖ Overwritten: id={m['id']} name={m['name']} size={m.get('size','?')} bytes")

          def create_in_folder(folder_id, path):
              meta = {"name": os.path.basename(path), "parents": [folder_id]}
              media = MediaFileUpload(path, mimetype="text/csv", resumable=True)
              newf = drive.files().create(body=meta, media_body=media, fields="id", supportsAllDrives=True).execute()
              m = get_meta(newf["id"])
              print(f"‚úÖ Created: id={m['id']} name={m['name']} size={m.get('size','?')} bytes")

          # ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1: ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô My Drive -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ö (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ SA ‡πÄ‡∏õ‡πá‡∏ô Editor)
          if FILE_ID:
              overwrite(FILE_ID, CSV)
              sys.exit(0)

          # ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2: ‡πÑ‡∏°‡πà‡∏°‡∏µ FILE_ID -> ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Shared Drive ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
          if not FOLDER_ID:
              print("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà DRIVE_FILE_ID (My Drive) ‡∏´‡∏£‡∏∑‡∏≠ PURIPAT_ID (Shared Drive) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡πà‡∏≤", file=sys.stderr)
              sys.exit(1)

          try:
              fmeta = get_meta(FOLDER_ID)
          except HttpError as e:
              print(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}", file=sys.stderr); sys.exit(1)

          if not fmeta.get("driveId"):
              print("‚ùå PURIPAT_ID ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô My Drive ‡∏ã‡∏∂‡πà‡∏á SA ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà", file=sys.stderr)
              print("üëâ ‡πÉ‡∏ä‡πâ DRIVE_FILE_ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ Shared Drive ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ PURIPAT_ID ‡∏Ç‡∏≠‡∏á Shared Drive", file=sys.stderr)
              sys.exit(1)

          # ‡πÄ‡∏õ‡πá‡∏ô Shared Drive -> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
          create_in_folder(FOLDER_ID, CSV)
          PY
