name: Auto Scrape WaterLevel

on:
  schedule:
    # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 20:00 ‡πÑ‡∏ó‡∏¢ (UTC+7) = 13:00 UTC
    - cron: '0 13 * * *'
  workflow_dispatch:

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTHONUNBUFFERED: "1"
      CSV_OUT: waterlevel_report.csv

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # ‡πÉ‡∏ä‡πâ Chrome ‡∏û‡∏£‡πâ‡∏≠‡∏° Selenium Manager (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á chromedriver ‡πÄ‡∏≠‡∏á)
      - name: Setup Google Chrome
        uses: browser-actions/setup-chrome@v1
      - name: Show Chrome version
        run: google-chrome --version || true

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install selenium pandas google-api-python-client google-auth google-auth-httplib2

      - name: Run scraper
        run: |
          set -eux
          python scrap2.py
          test -f "${CSV_OUT}"

      - name: Upload artifact (CSV)
        if: always() && hashFiles(env.CSV_OUT) != ''
        uses: actions/upload-artifact@v4
        with:
          name: waterlevel_report
          path: ${{ env.CSV_OUT }}
          if-no-files-found: ignore
          retention-days: 7

      # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:
      # - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ DRIVE_FILE_ID -> Overwrite ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° (My Drive/Shared Drive ‡∏Å‡πá‡πÑ‡∏î‡πâ)
      # - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÅ‡∏ï‡πà PURIPAT_ID ‡πÄ‡∏õ‡πá‡∏ô Shared Drive -> Create ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô
      # - ‡∏ñ‡πâ‡∏≤ PURIPAT_ID ‡πÄ‡∏õ‡πá‡∏ô My Drive ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° -> ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ SA ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà DRIVE_FILE_ID)
      - name: Upload to Google Drive (smart update-or-create)
        if: success() && hashFiles('waterlevel_report.csv') != ''
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT }}   # JSON ‡∏Ç‡∏≠‡∏á Service Account (‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô)
          DRIVE_FILE_ID: ${{ secrets.DRIVE_FILE_ID }}            # (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1) fileId ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô My Drive
          DRIVE_FOLDER_ID: ${{ secrets.PURIPAT_ID }}             # (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2) ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (My/Shared Drive ‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ)
          CSV_OUT: waterlevel_report.csv
        run: |
          python - <<'PY'
          import os, json, io, sys
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
          from googleapiclient.errors import HttpError

          SA = json.loads(os.environ["SERVICE_ACCOUNT_JSON"])
          FILE_ID = (os.environ.get("DRIVE_FILE_ID") or "").strip() or None
          FOLDER_ID = (os.environ.get("DRIVE_FOLDER_ID") or "").strip() or None
          CSV = os.environ.get("CSV_OUT", "waterlevel_report.csv")

          creds = Credentials.from_service_account_info(SA, scopes=["https://www.googleapis.com/auth/drive"])
          drive = build("drive", "v3", credentials=creds, cache_discovery=False)

          def get_meta(fid):
              return drive.files().get(fileId=fid, fields="id,name,size,mimeType,driveId,parents", supportsAllDrives=True).execute()

          def overwrite(fid, path):
              media = MediaFileUpload(path, mimetype="text/csv", resumable=True)
              drive.files().update(fileId=fid, media_body=media, supportsAllDrives=True).execute()
              m = get_meta(fid)
              print(f"‚úÖ Overwritten: id={m['id']} name={m['name']} size={m.get('size','?')} bytes")

          def create_in_folder(folder_id, path):
              meta = {"name": os.path.basename(path), "parents": [folder_id]}
              media = MediaFileUpload(path, mimetype="text/csv", resumable=True)
              newf = drive.files().create(body=meta, media_body=media, fields="id", supportsAllDrives=True).execute()
              m = get_meta(newf["id"])
              print(f"‚úÖ Created: id={m['id']} name={m['name']} size={m.get('size','?')} bytes")

          def escape_single_quotes(s: str) -> str:
              return s.replace("'", "\\'")

          def find_by_name_in_folder(name, folder_id):
              safe_name = escape_single_quotes(name)
              q = "name = '{}' and '{}' in parents and trashed = false".format(safe_name, folder_id)
              r = drive.files().list(q=q, fields="files(id,name)", supportsAllDrives=True, includeItemsFromAllDrives=True).execute()
              files = r.get("files", [])
              return files[0]["id"] if files else None

          # 1) ‡∏°‡∏µ FILE_ID -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á My/Shared Drive; ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ SA ‡πÄ‡∏õ‡πá‡∏ô Editor)
          if FILE_ID:
              overwrite(FILE_ID, CSV)
              sys.exit(0)

          # 2) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ FOLDER_ID ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏ï‡πà‡∏≠
          if not FOLDER_ID:
              print("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà DRIVE_FILE_ID (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô My Drive) ‡∏´‡∏£‡∏∑‡∏≠ PURIPAT_ID (‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô Shared Drive)", file=sys.stderr)
              sys.exit(1)

          # ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ FOLDER_ID ‡πÄ‡∏õ‡πá‡∏ô Shared Drive ‡∏´‡∏£‡∏∑‡∏≠ My Drive
          try:
              fmeta = get_meta(FOLDER_ID)
          except HttpError as e:
              print(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}", file=sys.stderr); sys.exit(1)
          is_shared_drive = bool(fmeta.get("driveId"))

          # 3) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå -> overwrite (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
          name = os.path.basename(CSV)
          existing_id = find_by_name_in_folder(name, FOLDER_ID)
          if existing_id:
              print("[INFO] ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå -> overwrite")
              overwrite(existing_id, CSV)
              sys.exit(0)

          # 4) ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°:
          if is_shared_drive:
              # Shared Drive: SA ‡∏°‡∏µ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏£‡∏ß‡∏° -> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
              create_in_folder(FOLDER_ID, CSV)
              sys.exit(0)
          else:
              # My Drive: SA ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡∏ß‡∏ï‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà -> ‡∏ö‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ
              print("‚ùå PURIPAT_ID ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô My Drive ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö", file=sys.stderr)
              print("üëâ ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", file=sys.stderr)
              print("   (A) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ SA ‡πÄ‡∏õ‡πá‡∏ô Editor ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏∞ overwrite ‡πÉ‡∏´‡πâ)", file=sys.stderr)
              print("   (B) ‡πÄ‡∏ï‡∏¥‡∏° SECRET ‡∏ä‡∏∑‡πà‡∏≠ DRIVE_FILE_ID ‡πÄ‡∏õ‡πá‡∏ô fileId ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ö‡∏ï‡∏£‡∏á ‡πÜ", file=sys.stderr)
              print("   (C) ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ Shared Drive ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ PURIPAT_ID ‡∏Ç‡∏≠‡∏á Shared Drive ‡πÅ‡∏ó‡∏ô", file=sys.stderr)
              sys.exit(1)
          PY
