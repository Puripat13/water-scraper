name: Scrape Waterlevel

on:
  schedule:
    - cron: '0 13 * * *'   # 20:00 Asia/Bangkok = 13:00 UTC
  workflow_dispatch:        # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏£‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ

jobs:
  run-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Google Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Show Chrome version
        run: chrome --version || google-chrome --version || chromium-browser --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium pandas google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

      - name: Run scraper
        run: |
          python waterlevel.py

      - name: Upload CSV to Google Drive (Service Account)
        env:
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT }}
          DRIVE_FOLDER_ID: ${{ secrets.PURIPAT_ID }}
          CSV_PATH: waterlevel_report.csv
        run: |
          python - <<'PY'
          import os, json, time
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          from googleapiclient.errors import HttpError

          SA_JSON = os.environ.get("GOOGLE_SERVICE_ACCOUNT_JSON")
          FOLDER_ID = os.environ.get("DRIVE_FOLDER_ID")
          CSV_PATH = os.environ.get("CSV_PATH", "waterlevel_report.csv")
          CSV_MIMETYPE = "text/csv"

          if not SA_JSON:
            raise RuntimeError("Missing secret: GOOGLE_SERVICE_ACCOUNT_JSON")
          if not FOLDER_ID:
            raise RuntimeError("Missing secret: DRIVE_FOLDER_ID")
          if not os.path.exists(CSV_PATH):
            raise FileNotFoundError(f"CSV not found: {CSV_PATH}")

          creds = service_account.Credentials.from_service_account_info(
              json.loads(SA_JSON),
              scopes=["https://www.googleapis.com/auth/drive"]
          )
          service = build("drive", "v3", credentials=creds, cache_discovery=False)

          # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
          service.files().get(fileId=FOLDER_ID, fields="id,name", supportsAllDrives=True).execute()

          # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
          from urllib.parse import quote
          name = os.path.basename(CSV_PATH).replace("'", "\\'")
          q = f"name = '{name}' and '{FOLDER_ID}' in parents and trashed = false"
          res = service.files().list(
              q=q, fields="files(id,name)", includeItemsFromAllDrives=True, supportsAllDrives=True
          ).execute()
          files = res.get("files", [])

          media = MediaFileUpload(CSV_PATH, mimetype=CSV_MIMETYPE, resumable=True)

          if files:
            file_id = files[0]["id"]
            updated = service.files().update(
                fileId=file_id, media_body=media, supportsAllDrives=True
            ).execute()
            print(f"‚úÖ Updated existing file (id={updated.get('id')})")
          else:
            file_metadata = {"name": os.path.basename(CSV_PATH), "parents": [FOLDER_ID]}
            created = service.files().create(
                body=file_metadata, media_body=media, fields="id,webViewLink", supportsAllDrives=True
            ).execute()
            print(f"‚úÖ Created new file (id={created.get('id')})")
            if created.get("webViewLink"):
                print(f"üîó Open: {created['webViewLink']}")
          PY
