import asyncio
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeout
from datetime import datetime
import pandas as pd
import time
import os

PROXIES = [
    "http://8.213.215.187:443",
    "http://8.213.215.187:3128",
    "http://8.213.222.247:8443",
    "http://8.213.195.191:18080",
    "http://8.213.197.208:8888"
]

success = False
for proxy in PROXIES:
    print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ proxy: {proxy}")
    try:
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            context = browser.new_context(proxy={
                "server": proxy
            })
            page = context.new_page()
            page.set_default_timeout(60000)  # 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

            page.goto("https://nationalthaiwater.onwr.go.th/waterlevel")

            print(f"üìÑ Title: {page.title()}")
            print(f"üåê URL: {page.url}")
            print("üìÑ HTML ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î (1,000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å):")
            print(page.content()[:1000])

            try:
                page.click("button:has-text('‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö')", timeout=5000)
                print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
            except:
                print("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ")

            print("‚è≥ ‡∏£‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            page.wait_for_selector(".MuiTable-root tbody tr", timeout=60000)

            all_data = []
            current_date = datetime.today().strftime("%d/%m/%Y")

            while True:
                rows = page.query_selector_all(".MuiTable-root tbody tr")
                print(f"üîé ‡∏û‡∏ö {len(rows)} ‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
                for row in rows:
                    cols = row.query_selector_all("td")
                    data = [col.inner_text().strip() for col in cols]
                    if len(data) < 5:
                        continue
                    if len(data) == 9:
                        data[-1] = current_date
                    else:
                        data.append(current_date)
                    all_data.append(data)

                try:
                    next_button = page.query_selector("button[title='Next Page']")
                    if next_button and not next_button.is_disabled():
                        next_button.click()
                        print("‚û°Ô∏è ‡∏Å‡∏î Next Page ‡πÅ‡∏•‡πâ‡∏ß...")
                        time.sleep(1)
                    else:
                        break
                except:
                    break

            if all_data:
                max_columns = max(len(row) for row in all_data)
                all_data = [row + [''] * (max_columns - len(row)) for row in all_data]

                column_names = [
                    "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ", "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥",
                    "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á", "‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏™‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö", "%‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏ô‡πâ‡∏≥",
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                ]
                if len(column_names) < max_columns:
                    column_names += [f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°_{i+1}" for i in range(max_columns - len(column_names))]

                file_path = "waterlevel_report.csv"
                file_exists = os.path.exists(file_path)
                df = pd.DataFrame(all_data, columns=column_names)
                df.to_csv(file_path, mode='a', index=False, encoding="utf-8-sig", header=not file_exists)
                print(f"üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {file_path} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

            else:
                print("‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
                with open("debug_page.html", "w", encoding="utf-8") as f:
                    f.write(page.content())
                page.screenshot(path="debug_screenshot.png", full_page=True)
                print("üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å debug_page.html ‡πÅ‡∏•‡∏∞ debug_screenshot.png ‡πÅ‡∏•‡πâ‡∏ß")

            context.close()
            browser.close()
            success = True
            break

    except PlaywrightTimeout:
        print("‚ùå Timeout ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö")
    except Exception as e:
        print(f"‚ùå Proxy ‡∏ô‡∏µ‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {proxy}\n{e}")

if not success:
    print("üõë ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å proxy")

    fallback_path = "waterlevel_report.csv"
    if not os.path.exists(fallback_path):
        with open(fallback_path, "w", encoding="utf-8-sig") as f:
            f.write("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°,‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n")
        print(f"üìÑ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå placeholder: {fallback_path}")

    exit(0)
