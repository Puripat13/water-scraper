# -*- coding: utf-8 -*-
import os, time, re, sys
from datetime import datetime
import pandas as pd

# -------- Selenium --------
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# ================== CONFIG ==================
URL = "https://nationalthaiwater.onwr.go.th/waterlevel"
CSV_OUT = "waterlevel_report.csv"
WAIT_SEC = 30
# ===================================================

def make_driver():
    opt = Options()
    # ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI
    opt.page_load_strategy = "eager"
    opt.add_argument("--headless=new")
    opt.add_argument("--no-sandbox")
    opt.add_argument("--disable-dev-shm-usage")
    opt.add_argument("--disable-gpu")
    opt.add_argument("--window-size=1366,768")
    opt.add_argument("--disable-blink-features=AutomationControlled")
    opt.add_argument("--disable-infobars")
    opt.add_argument("--disable-notifications")
    opt.add_argument("--lang=th-TH,th")
    opt.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
    )
    drv = webdriver.Chrome(options=opt)
    drv.set_page_load_timeout(60)
    return drv

def wait_rows(driver):
    """
    ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ú‡∏•‡πà ‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Table ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞ DataGrid (role='row')
    """
    sel_try = [
        (By.CSS_SELECTOR, ".MuiTable-root tbody tr"),
        (By.CSS_SELECTOR, "table tbody tr"),
        (By.CSS_SELECTOR, "div[role='rowgroup'] [role='row']"),
    ]
    for by, sel in sel_try:
        try:
            WebDriverWait(driver, WAIT_SEC).until(EC.presence_of_element_located((by, sel)))
            rows = driver.find_elements(by, sel)
            if rows:
                return (by, sel)
        except Exception:
            pass
    raise TimeoutError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ó‡∏±‡πâ‡∏á Table ‡πÅ‡∏•‡∏∞ DataGrid)")

def find_next_button(driver):
    """
    ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° '‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ' ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö MUI/DataGrid
    """
    xpaths = [
        "//button[@aria-label='Next page' and not(@disabled)]",
        "//span[@title='Next Page']/button[not(@disabled)]",
        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏Ç‡∏ß‡∏≤ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ disabled
        "//button[.//*[name()='svg' or name()='path']]"
        "[not(@disabled) and (contains(., 'Next') or @aria-label='Next page')]",
        # ‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ title/aria-label ‡πÄ‡∏õ‡πá‡∏ô next
        "//*[self::button or self::span][contains(@title,'Next') or contains(@aria-label,'Next')]/self::button[not(@disabled)]",
    ]
    for xp in xpaths:
        els = driver.find_elements(By.XPATH, xp)
        for el in els:
            try:
                if el.is_enabled():
                    return el
            except Exception:
                continue
    # ‡πÅ‡∏ö‡∏ö CSS (‡∏ö‡∏≤‡∏á‡∏ò‡∏µ‡∏°‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô)
    css_try = [
        "button[aria-label='Next page']:not([disabled])",
        "span[title='Next Page'] > button:not([disabled])",
    ]
    for sel in css_try:
        els = driver.find_elements(By.CSS_SELECTOR, sel)
        for el in els:
            try:
                if el.is_enabled():
                    return el
            except Exception:
                continue
    return None

def get_rows(driver, row_locator):
    by, sel = row_locator
    rows = driver.find_elements(by, sel)
    # ‡∏Å‡∏£‡∏ì‡∏µ DataGrid, ‡∏ö‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÄ‡∏õ‡πá‡∏ô header role=row ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á td/cell
    out = []
    for row in rows:
        tds = row.find_elements(By.CSS_SELECTOR, "td")
        if not tds:
            # ‡∏ö‡∏≤‡∏á DataGrid ‡πÉ‡∏ä‡πâ role='gridcell'
            tds = row.find_elements(By.CSS_SELECTOR, "[role='gridcell']")
        cols = [c.text.strip() for c in tds]
        if cols:
            out.append(cols)
    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏∞‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö table ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
    if not out:
        rows = driver.find_elements(By.CSS_SELECTOR, "table tbody tr")
        for row in rows:
            tds = row.find_elements(By.CSS_SELECTOR, "td")
            cols = [c.text.strip() for c in tds]
            if cols:
                out.append(cols)
    return out

# ----- helper: ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏ï‡∏±‡∏î‡∏£‡∏´‡∏±‡∏™/‡πÄ‡∏•‡∏Ç/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤) -----
def extract_thai(text: str) -> str:
    if pd.isna(text) or text is None:
        return ""
    m = re.search(r"[‡∏Å-‡πô].*", str(text))
    return m.group(0).strip() if m else str(text).strip()

def scrape_waterlevel():
    driver = make_driver()
    start_time = time.time()
    try:
        print(f"[INFO] ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤: {URL}")
        driver.get(URL)

        print("[INFO] ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ú‡∏•‡πà‚Ä¶")
        row_locator = wait_rows(driver)
        print(f"[INFO] ‡πÉ‡∏ä‡πâ locator: {row_locator}")

        all_data = []
        current_date = datetime.today().strftime("%d/%m/%Y")
        page_idx = 1

        while True:
            time.sleep(1.2)

            rows = get_rows(driver, row_locator)
            print(f"[INFO] Page {page_idx}: ‡∏û‡∏ö {len(rows)} ‡πÅ‡∏ñ‡∏ß")
            for r in rows:
                # ‡∏Å‡∏±‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö -> ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 9 ‡∏ä‡πà‡∏≠‡∏á
                while len(r) < 9:
                    r.append("")
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 9 ‡∏Å‡πá‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á‡∏ó‡πâ‡∏≤‡∏¢ (‡∏Å‡∏±‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î)
                if len(r) > 9:
                    r = r[:9]
                # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                r[-1] = current_date
                all_data.append(r)

            # ‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            try:
                next_btn = find_next_button(driver)
                if next_btn and next_btn.is_enabled():
                    driver.execute_script("arguments[0].click();", next_btn)
                    print("‚û°Ô∏è Next Page")
                    page_idx += 1
                    time.sleep(1.0)
                    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß)
                    WebDriverWait(driver, 10).until(lambda d: len(get_rows(d, row_locator)) > 0)
                else:
                    print("[INFO] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô -> ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    break
            except Exception as e:
                print(f"[WARN] ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e} -> ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                break

        return all_data, start_time
    finally:
        driver.quit()

def save_csv(all_data):
    if not all_data:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        return

    # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö 9 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏Æ‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå
    headers = [
        "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ", "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥",
        "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á", "‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏™‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö", "%‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏ô‡πâ‡∏≥",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    ]
    fixed = []
    for r in all_data:
        row = list(r)[:9]
        while len(row) < 9:
            row.append("")
        fixed.append(row)

    file_exists = os.path.exists(CSV_OUT)
    df = pd.DataFrame(fixed, columns=headers)

    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ' ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ"] = df["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ"].apply(extract_thai)

    df.to_csv(CSV_OUT, mode="a", index=False, encoding="utf-8-sig", header=not file_exists)
    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å {len(df)} ‡πÅ‡∏ñ‡∏ß -> {CSV_OUT}")

def main():
    try:
        all_data, t0 = scrape_waterlevel()
        save_csv(all_data)
        print(f"‚è± ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {time.time() - t0:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
