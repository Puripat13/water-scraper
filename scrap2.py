from playwright.sync_api import sync_playwright
import pandas as pd
from datetime import datetime
import os
import time

file_path = "waterlevel_report.csv"

def run():
    all_data = []
    current_date = datetime.today().strftime("%d/%m/%Y")

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        print("üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö...")

        try:
            page.goto("https://nationalthaiwater.onwr.go.th/waterlevel", timeout=90000)
            page.wait_for_selector(".MuiTable-root tbody tr", timeout=30000)

            while True:
                rows = page.query_selector_all(".MuiTable-root tbody tr")

                for row in rows:
                    cols = row.query_selector_all("td")
                    data = [col.inner_text().strip() for col in cols]

                    if len(data) < 5:
                        continue

                    if len(data) == 9:
                        data[-1] = current_date
                    else:
                        data.append(current_date)

                    all_data.append(data)

                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° Next ‚Üí ‡∏Ñ‡∏•‡∏¥‡∏Å
                try:
                    next_button = page.query_selector("//span[@title='Next Page']/button")
                    if next_button and not next_button.is_disabled():
                        next_button.click()
                        print("‚û°Ô∏è ‡∏Å‡∏î Next Page ‡πÅ‡∏•‡πâ‡∏ß...")
                        time.sleep(1)
                    else:
                        print("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
                        break
                except:
                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° Next Page ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                    break

        except Exception as e:
            print(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

        browser.close()

    if all_data:
        max_columns = max(len(row) for row in all_data)
        all_data = [row + [''] * (max_columns - len(row)) for row in all_data]

        column_names = [
            "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ", "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥",
            "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á", "‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏™‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö", "%‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏ô‡πâ‡∏≥",
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        ]
        if len(column_names) < max_columns:
            column_names += [f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°_{i+1}" for i in range(max_columns - len(column_names))]

        file_exists = os.path.exists(file_path)
        df = pd.DataFrame(all_data, columns=column_names)
        df.to_csv(file_path, mode='a', index=False, encoding="utf-8-sig", header=not file_exists)

        print(f"üìÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {file_path} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Äì ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ GitHub ‡πÑ‡∏°‡πà‡∏û‡∏±‡∏á")
        with open(file_path, "w", encoding="utf-8-sig") as f:
            f.write("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ\n")

if __name__ == "__main__":
    run()

