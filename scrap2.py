import chromedriver_autoinstaller
chromedriver_autoinstaller.install()

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime
import pandas as pd
import time
import os

# ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Proxy IP ‡πÑ‡∏ó‡∏¢
PROXIES = [
    "http://8.213.215.187:443",
    "http://8.213.215.187:3128",
    "http://8.213.222.247:8443",
    "http://8.213.195.191:18080",
    "http://8.213.197.208:8888"
]

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á driver ‡∏û‡∏£‡πâ‡∏≠‡∏° proxy
def create_driver_with_proxy(proxy):
    options = Options()
    options.add_argument('--headless=new')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    options.add_argument('--window-size=1920,1080')
    options.add_argument('--blink-settings=imagesEnabled=false')
    options.add_argument(f'--proxy-server={proxy}')
    return webdriver.Chrome(options=options)

# ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ proxy ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
driver = None
for proxy in PROXIES:
    try:
        print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ proxy: {proxy}")
        driver = create_driver_with_proxy(proxy)
        driver.get('https://nationalthaiwater.onwr.go.th/waterlevel')
        WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "body"))
        )
        print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ proxy ‡∏ô‡∏µ‡πâ")
        break
    except Exception as e:
        print(f"‚ùå Proxy ‡∏ô‡∏µ‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {proxy}\n{e}")
        if driver:
            driver.quit()
            driver = None

# ‚ùå ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å proxy ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
if not driver:
    print("üõë ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡∏î‡πâ‡∏ß‡∏¢ proxy ‡πÉ‡∏î ‡πÜ ‡πÑ‡∏î‡πâ")
    exit(1)

# ‚úÖ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Å‡∏î‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
try:
    WebDriverWait(driver, 5).until(
        EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), '‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö')]"))
    ).click()
    print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
except:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° scrape
WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.CSS_SELECTOR, ".MuiTable-root tbody tr"))
)

start_time = time.time()
all_data = []
current_date = datetime.today().strftime("%d/%m/%Y")

while True:
    try:
        WebDriverWait(driver, 5).until(
            EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".MuiTable-root tbody tr"))
        )
    except:
        print("‚ö†Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ...")
        break

    table_rows = driver.find_elements(By.CSS_SELECTOR, ".MuiTable-root tbody tr")
    for row in table_rows:
        cols = row.find_elements(By.CSS_SELECTOR, "td")
        data = [col.text.strip() for col in cols]
        if len(data) < 5:
            continue
        if len(data) == 9:
            data[-1] = current_date
        else:
            data.append(current_date)
        all_data.append(data)

    try:
        next_button = WebDriverWait(driver, 2).until(
            EC.element_to_be_clickable((By.XPATH, "//span[@title='Next Page']/button"))
        )
        if next_button.is_enabled():
            driver.execute_script("arguments[0].click();", next_button)
            print("‚û°Ô∏è ‡∏Å‡∏î Next Page ‡πÅ‡∏•‡πâ‡∏ß...")
            time.sleep(0.5)
        else:
            break
    except:
        break

if all_data:
    max_columns = max(len(row) for row in all_data)
    all_data = [row + [''] * (max_columns - len(row)) for row in all_data]

    column_names = [
        "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ", "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥",
        "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á", "‡∏Ñ‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏™‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö", "%‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏ô‡πâ‡∏≥",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    ]
    if len(column_names) < max_columns:
        column_names += [f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°_{i+1}" for i in range(max_columns - len(column_names))]

    file_path = "waterlevel_report.csv"
    file_exists = os.path.exists(file_path)
    df = pd.DataFrame(all_data, columns=column_names)
    df.to_csv(file_path, mode='a', index=False, encoding="utf-8-sig", header=not file_exists)
    print(f"üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {file_path} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

driver.quit()
end_time = time.time()
print(f"‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {end_time - start_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

